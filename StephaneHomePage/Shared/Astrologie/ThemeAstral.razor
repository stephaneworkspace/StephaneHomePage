
@using System.Drawing
@using StephaneHomePage.Struct.Astrologie
@using StephaneHomePage.Data.OpenFile;
@if (_swOk)
{
    <center>
        <div class="canvas" style="height: @_sizeThemeAstralpx; width:@_sizeThemeAstralpx;">
            @RenderSvgCircle()
            @foreach (Angle a in this._computeThemeAstral.Angle)
                @RenderSvgAngleLine(a)
            @foreach (Planet p in this._computeThemeAstral.Planet)
                @RenderSvgPlanetLine(p)
            @foreach (Zodiac z in this._computeThemeAstral.Zodiac)
                @RenderSvgZodiac(Toaster, z)
            @foreach (House h in this._computeThemeAstral.House)
                @RenderSvgHouse(Toaster, h)
            @foreach (Angle a in this._computeThemeAstral.Angle)
                @if (a.Svg != "")
                {
                    @RenderSvgAngleSymbol(Toaster, a)
                    @RenderSvgAngleDegSymbol(Toaster, a)
                    @RenderSvgAngleMinSymbol(Toaster, a)
                }
                @foreach (Planet p in this._computeThemeAstral.Planet)
                {
                    @if (p.IsRetrograde)
                        @RenderSvgPlanetRetrogradeSymbol(Toaster, p)
                        @RenderSvgPlanetSymbol(Toaster, p)
                        @RenderSvgPlanetDegSymbol(Toaster, p)
                        @RenderSvgPlanetMinSymbol(Toaster, p)
                }
        </div>
        @if (LockBook)
        {
            <div>test</div>
        }
    </center>
}

@code {
    private RenderFragment RenderSvgCircle()
    {
        return@<div class="element svg-base"
                    style="
                        background-image:url('data:image/svg+xml;base64,@this._drawImage.GetSvgCircle(true)');"></div>;
    }

    private RenderFragment RenderSvgAngleLine(Angle angle)
    {
        return@<div class="element svg-base"
                    style="
                        background-color:@ColorTranslator.ToHtml(angle.Color);
                        -webkit-mask:url('data:image/svg+xml;base64,@this._drawImage.GetSvgAngleLine(true, angle)') no-repeat center;
                        -webkit-mask-size:contain"
               ></div>;
    }

    private RenderFragment RenderSvgPlanetLine(Planet planet)
    {
        return@<div class="element svg-base"
                    style="
                        background-color:@ColorTranslator.ToHtml(planet.Color);
                        -webkit-mask:url('data:image/svg+xml;base64,@this._drawImage.GetSvgPlanetLine(true, planet)') no-repeat center;
                        -webkit-mask-size:contain"
               ></div>;
    }

    private RenderFragment RenderSvgZodiac(IMatToaster Toaster, Zodiac z)
    {
        OpenSvg openSvg = new OpenSvg(z.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whZodiacSize + "px";
            string leftPx = z.XYZodiac.dx + "px";
            string topPx = z.XYZodiac.dy + "px";
            return @<MatTooltip Tooltip="@z.Sign">
                        <div @ref="context.Current"
                             class="element svg-zodiac"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(z.Element.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgHouse(IMatToaster Toaster, House h)
    {
        OpenSvg openSvg = new OpenSvg(h.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whHouseSize + "px";
            string leftPx = h.XYHouse.dx + "px";
            string topPx = h.XYHouse.dy + "px";
            string tooltip = "Maison " + h.Id.ToString();
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-house"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-image:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64');"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgAngleSymbol(IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleSymbolSize + "px";
            string leftPx = a.XYAngle.dx + "px";
            string topPx = a.XYAngle.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-angle"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(a.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgAngleDegSymbol(IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.SvgDegre);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleDegSymbolSize + "px";
            string leftPx = a.XYDeg.dx + "px";
            string topPx = a.XYDeg.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-angle"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(a.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgAngleMinSymbol(IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.SvgMin);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleMinSymbolSize + "px";
            string leftPx = a.XYMin.dx + "px";
            string topPx = a.XYMin.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-angle"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(a.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgPlanetRetrogradeSymbol(IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(SVGRETROGRADE);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleMinSymbolSize + "px";
            string leftPx = p.XYPlanet.dx + "px";
            string topPx = p.XYPlanet.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-planet"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(p.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgPlanetSymbol(IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetSymbolSize + "px";
            string leftPx = p.XYPlanet.dx + "px";
            string topPx = p.XYPlanet.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-planet"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(p.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgPlanetDegSymbol(IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.SvgDegre);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetDegSymbolSize + "px";
            string leftPx = p.XYDeg.dx + "px";
            string topPx = p.XYDeg.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-planet"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(p.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }

    private RenderFragment RenderSvgPlanetMinSymbol(IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.SvgMin);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetMinSymbolSize + "px";
            string leftPx = p.XYMin.dx + "px";
            string topPx = p.XYMin.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            return @<MatTooltip Tooltip="@tooltip">
                        <div @ref="context.Current"
                             class="element svg-planet"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color:@ColorTranslator.ToHtml(p.Color);
                                    -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size:contain"
                        ></div>
                    </MatTooltip>;
        }
    }
}