
@using System.Drawing
@using StephaneHomePage.Struct.Astrologie
@using StephaneHomePage.Data.OpenFile
@using StephaneHomePage.Struct.Astrologie.Text;
@if (_swOk)
{
    /* Define Color */
    @if (Struct == StructThemeAstral.Img)
    {
        <svg height="0px" width="0px">
            <defs>
                @foreach (Angle a in this._computeThemeAstral.Angle)
                    @ComputeMatrixSvgFilter("angle-line-" + a.Id, a.Color)
                @foreach (Planet p in this._computeThemeAstral.Planet)
                    @ComputeMatrixSvgFilter("planet-line-" + p.Id, p.Color)
            </defs>
        </svg>
    }
    /* Define Svg content */
    <center>
        <div class="canvas" style="height: @_sizeThemeAstralpx; width:@_sizeThemeAstralpx;">
            @RenderSvgCircle(Struct)
            @foreach (Angle a in this._computeThemeAstral.Angle)
                @RenderSvgAngleLine(Struct, a)
            @foreach (Planet p in this._computeThemeAstral.Planet)
                @RenderSvgPlanetLine(Struct, p)
            @foreach (Zodiac z in this._computeThemeAstral.Zodiac)
                @RenderSvgZodiac(Struct, Toaster, z)
            @foreach (House h in this._computeThemeAstral.House)
                @RenderSvgHouse(Struct, Toaster, h)
            @foreach (Angle a in this._computeThemeAstral.Angle)
                @if (a.Svg != "")
                {
                    @RenderSvgAngleSymbol(Struct, Toaster, a)
                    @RenderSvgAngleDegSymbol(Struct, Toaster, a)
                    @RenderSvgAngleMinSymbol(Struct, Toaster, a)
                }
                @foreach (Planet p in this._computeThemeAstral.Planet)
                {
                    @if (p.IsRetrograde)
                        @RenderSvgPlanetRetrogradeSymbol(Struct, Toaster, p)
                        @RenderSvgPlanetSymbol(Struct, Toaster, p)
                        @RenderSvgPlanetDegSymbol(Struct, Toaster, p)
                        @RenderSvgPlanetMinSymbol(Struct, Toaster, p)
                }
        </div>
    </center>
    @if (LockBook)
    {
        @foreach (ZodiacT z in this._computeThemeAstral.ZodiacT)
        {
            <ZodiacText ZodiacT="@z" />
        }
    }
}

@code {
    private RenderFragment ComputeMatrixSvgFilter(string id, Color color)
    {
        string hexa = ColorTranslator.ToHtml(color);
        double r = Convert.ToInt16(color.R);
        r = (((r / 255) * 100) / 100);
        double g = Convert.ToInt16(color.G);
        g = (((g / 255) * 100) / 100);
        double b = Convert.ToInt16(color.B);
        b = (((b / 255) * 100) / 100);
        string[] matrix = new string[4];
        matrix[0] = $"0 0 0 0 {r}";
        matrix[1] = $"0 0 0 0 {g}";
        matrix[2] = $"0 0 0 0 {b}";
        matrix[3] = $"0 0 0 1 0"; // alpha
        string matrixString = $"{matrix[0]} " +
                              $"{matrix[1]} " +
                              $"{matrix[2]} " +
                              $"{matrix[3]}";
        return @<filter id="@id" color-interpolation-filters="sRGB">
                    <feColorMatrix type="matrix" rgbaToFeColorMatrix = "255, 0, 0, 1" values="@matrixString" />
                </filter>;
    }

    private RenderFragment RenderSvgCircle(StructThemeAstral e)
    {
        switch (e)
        {
            case StructThemeAstral.Css:
                return@<div class="element svg-base"
                            style="
                                background-image:url('data:image/svg+xml;base64,@this._drawImage.GetSvgCircle(true)');"></div>;
            case StructThemeAstral.Img:
                return @<img class="element" src="data:image/svg+xml;base64,@this._drawImage.GetSvgCircle(true)" />;
            default:
                return @<div />;
        }
    }

    private RenderFragment RenderSvgAngleLine(StructThemeAstral e, Angle angle)
    {
        switch (e)
        {
            case StructThemeAstral.Css:
                return@<div class="element svg-base"
                            style="
                                background-color:@ColorTranslator.ToHtml(angle.Color);
                                -webkit-mask:url('data:image/svg+xml;base64,@this._drawImage.GetSvgAngleLine(true, angle)') no-repeat center;
                                -webkit-mask-size:contain"
                       ></div>;
            case StructThemeAstral.Img:
                return@<div class="element">
                            <img style="filter:url(#angle-line-@angle.Id);" src="data:image/svg+xml;base64,@this._drawImage.GetSvgAngleLine(true, angle)"/>
                       </div>;
            default:
                return@<div />;
        }
    }

    private RenderFragment RenderSvgPlanetLine(StructThemeAstral e, Planet planet)
    {
        switch (e)
        {
            case StructThemeAstral.Css:
                return@<div class="element svg-base"
                            style="
                                background-color:@ColorTranslator.ToHtml(planet.Color);
                                -webkit-mask:url('data:image/svg+xml;base64,@this._drawImage.GetSvgPlanetLine(true, planet)') no-repeat center;
                                -webkit-mask-size:contain"
                       ></div>;
            case StructThemeAstral.Img:
                return@<div class="element">
                            <img style="filter:url(#planet-line-@planet.Id);" src="data:image/svg+xml;base64,@this._drawImage.GetSvgPlanetLine(true, planet)" />
                       </div>;
            default:
                return @<div />;
        }
    }

    private RenderFragment RenderSvgZodiac(StructThemeAstral e, IMatToaster Toaster, Zodiac z)
    {
        OpenSvg openSvg = new OpenSvg(z.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whZodiacSize + "px";
            string leftPx = z.XYZodiac.dx + "px";
            string topPx = z.XYZodiac.dy + "px";
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@z.Sign">
                                <div @ref="context.Current"
                                     class="element svg-zodiac"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(z.Element.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                    default:
                        return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgHouse(StructThemeAstral e, IMatToaster Toaster, House h)
    {
        OpenSvg openSvg = new OpenSvg(h.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whHouseSize + "px";
            string leftPx = h.XYHouse.dx + "px";
            string topPx = h.XYHouse.dy + "px";
            string tooltip = "Maison " + h.Id.ToString();
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-house"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-image:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64');"
                                ></div>
                            </MatTooltip>;
                default:
                        return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgAngleSymbol(StructThemeAstral e, IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleSymbolSize + "px";
            string leftPx = a.XYAngle.dx + "px";
            string topPx = a.XYAngle.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-angle"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(a.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgAngleDegSymbol(StructThemeAstral e, IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.SvgDegre);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleDegSymbolSize + "px";
            string leftPx = a.XYDeg.dx + "px";
            string topPx = a.XYDeg.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-angle"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(a.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgAngleMinSymbol(StructThemeAstral e, IMatToaster Toaster, Angle a)
    {
        OpenSvg openSvg = new OpenSvg(a.SvgMin);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleMinSymbolSize + "px";
            string leftPx = a.XYMin.dx + "px";
            string topPx = a.XYMin.dy + "px";
            string tooltip = a.Id + " " + a.SignPos;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-angle"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(a.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgPlanetRetrogradeSymbol(StructThemeAstral e, IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(SVGRETROGRADE);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whAngleMinSymbolSize + "px";
            string leftPx = p.XYPlanet.dx + "px";
            string topPx = p.XYPlanet.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-planet"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(p.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgPlanetSymbol(StructThemeAstral e, IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetSymbolSize + "px";
            string leftPx = p.XYPlanet.dx + "px";
            string topPx = p.XYPlanet.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-planet"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(p.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgPlanetDegSymbol(StructThemeAstral e, IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.SvgDegre);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetDegSymbolSize + "px";
            string leftPx = p.XYDeg.dx + "px";
            string topPx = p.XYDeg.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-planet"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(p.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }

    private RenderFragment RenderSvgPlanetMinSymbol(StructThemeAstral e, IMatToaster Toaster, Planet p)
    {
        OpenSvg openSvg = new OpenSvg(p.SvgMin);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
            Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, openSvg.ErrTitle, "danger");
            return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whPlanetMinSymbolSize + "px";
            string leftPx = p.XYMin.dx + "px";
            string topPx = p.XYMin.dy + "px";
            string tooltip = p.Id + " " + p.SignPos + " " + p.Movement;
            switch (e)
            {
                case StructThemeAstral.Css:
                    return @<MatTooltip Tooltip="@tooltip">
                                <div @ref="context.Current"
                                     class="element svg-planet"
                                     style="
                                            width:@sizePx;
                                            height:@sizePx;
                                            left:@leftPx;
                                            top:@topPx;
                                            background-color:@ColorTranslator.ToHtml(p.Color);
                                            -webkit-mask:url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                            -webkit-mask-size:contain"
                                ></div>
                            </MatTooltip>;
                default:
                    return @<div />;
            }
        }
    }
}