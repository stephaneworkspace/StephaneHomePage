@inject IAstrologieServiceHttp AstrologieServiceHttp
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IMatToaster Toaster
@using System.Drawing
@using Services.Http
@using Struct.ImportJson
@using StephaneHomePage.Data.Astrologie.ThemeAstral.Draw
@using StephaneHomePage.Data.Astrologie.ThemeAstral
@using StephaneHomePage.Struct.Astrologie
@using StephaneHomePage.Data.OpenFile;
@if (_swOk)
{
    <center>
        <div class="canvas" style="height: @_sizeThemeAstralpx; width:@_sizeThemeAstralpx;">
            @RenderSvgCircle(_imageSVG)
            @foreach (Zodiac z in this._computeThemeAstral.Zodiac)
                @RenderSvgZodiac(Toaster, z)
        </div>
    </center>
    <h2>Svg</h2>
    <br />
    <div class="svg-console">@_imageSVGConsole</div>
}
@*

*@

@code {
    [Parameter] public ImportJson Json { get; set; }
    [Parameter] public double MaxWidth { get; set; }
    [Parameter] public double MaxHeight { get; set; }

    private bool _swOk = false;
    private ComputeThemeAstral _computeThemeAstral;
    private String _imageSVG;
    private String _imageSVGConsole;
    private String _sizeThemeAstralpx;

    protected override void OnInitialized()
    {
        if (Json != null)
            GeneratePicture();
    }

    protected override void OnParametersSet()
    {
        if (Json != null)
            GeneratePicture();
    }

    private void GeneratePicture()
    {
        _computeThemeAstral = new ComputeThemeAstral(Json, MaxWidth, MaxHeight);
        _sizeThemeAstralpx = _computeThemeAstral.CalcDraw.getSizeWH().ToString() + "px";
        DrawImage drawImage = new DrawImage(_computeThemeAstral);
        _imageSVG = drawImage.GetSvg(false);
        _imageSVGConsole = drawImage.GetSvg(true);
        _swOk = true;
    }

    private RenderFragment RenderSvgCircle(string svg)
    {
        return@<div class="element svg-base"
                    style="
                        background-image: url('data:image/svg+xml;utf8,@svg');"></div>;
    }

    private RenderFragment RenderSvgZodiac(IMatToaster Toaster, Zodiac z)
    {
        OpenSvg openSvg = new OpenSvg(z.Svg);
        openSvg.LoadSvgB64();
        if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
        {
        Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, "Erreur de chargement d'image", "danger");
        return @<div />;
        }
        else
        {
            string sizePx = this._computeThemeAstral.whZodiacSize + "px";
            string leftPx = z.XYZodiac.dx + "px";
            string topPx = z.XYZodiac.dy + "px";
            return @<MatTooltip Tooltip="@z.Sign">
                        <div class="element svg-zodiac"
                             style="
                                    width:@sizePx;
                                    height:@sizePx;
                                    left:@leftPx;
                                    top:@topPx;
                                    background-color: @ColorTranslator.ToHtml(z.Element.Color);
                                    -webkit-mask: url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64') no-repeat center;
                                    -webkit-mask-size: contain"
                        ></div>
                    </MatTooltip>;
        }
    }
}