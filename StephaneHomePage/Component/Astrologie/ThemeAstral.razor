@inject IAstrologieServiceHttp AstrologieServiceHttp
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IMatToaster Toaster
@using System.IO
@using Services.Http
@using Struct.ImportJson
@using StephaneHomePage.Data.Astrologie.ThemeAstral.Draw
@using StephaneHomePage.Data.Type
@using StephaneHomePage.Data.Astrologie.ThemeAstral
@using StephaneHomePage.Struct.Astrologie
@using System.Text.RegularExpressions;
@using System.Text;
@using StephaneHomePage.Data.OpenFile;
@if (_swOk)
{
    <center>
        <div class="canvas" style="height: @_sizeThemeAstralpx; width:@_sizeThemeAstralpx;">
            @{ int i = 0;}
            <div class="element svg-base" style="background-image: url('data:image/svg+xml;utf8,@_imageSVG');"></div>
            @foreach (var z in this._computeThemeAstral.Zodiac)
            {
                i++;
                if (i == 1)
                {
                    OpenSvg openSvg = new OpenSvg(z.Svg);
                    openSvg.LoadSvgB64();
                    if (openSvg.SwStatus == false || openSvg.ErrMessage != "")
                    {
                        Toaster.Add(openSvg.ErrMessage, MatToastType.Danger, "Erreur de chargement d'image", "danger");
                    }
                    else
                    {
                        <div class="element svg-zodiac" style="background-image: url('data:image/svg+xml;base64,@openSvg.getSvg().SvgB64');"></div>
                    }
                }
            }
        </div>
    </center>
    <!--<div style="height: @_sizeThemeAstralpx; width:@_sizeThemeAstralpx;"></div>-->
    <h2>Svg</h2>
    <br />
    <div class="svg-console">@_imageSVGConsole</div>
}
@*


        public String SvgB64;
    public String SvgStringWithoutMod;
    public String SvgStringWithMod;

    /// <summary>
    /// inspired from https://github.com/yoksel/url-encoder/
    /// </summary>
    /// <param name="imageMagickB64">Base 64 from ImageMagik</param>
    public Svg (String imageMagickB64)
    {
        byte[] dataByteArray = Convert.FromBase64String(imageMagickB64);
        String temp = ASCIIEncoding.UTF8.GetString(dataByteArray);





          for (var z in _zodiac)
            new Positioned( //.fill not identic
              left: z.xyZodiac.dx,
              top: z.xyZodiac.dy,
              child: new GestureDetector(
                onTap: () {
                  _zodiacClick(z.idByAsc);
                  print("onTap called. " + z.sign);
                },
                child: new Container(
                  width: whZodiacSize,
                  height: whZodiacSize,
                  margin: const EdgeInsets.only(left: 0.0, right: 0.0),
                  padding: const EdgeInsets.only(left: 0.0, right: 0.0),
                  child: SvgPicture.asset(z.svg,
                    width: whZodiacSize,
                    height: whZodiacSize,
                    fit: BoxFit.scaleDown,
                    allowDrawingOutsideViewBox: true,
                    alignment: Alignment.center,
                    color: z.element.color,
                    semanticsLabel: z.sign
                  ),
                )
              ),
            ),

*@

@code {
    [Parameter] public ImportJson Json { get; set; }
    [Parameter] public double MaxWidth { get; set; }
    [Parameter] public double MaxHeight { get; set; }

    private bool _swOk = false;
    private ComputeThemeAstral _computeThemeAstral;
    private String _imageSVG;
    private String _imageSVGConsole;
    private String _sizeThemeAstralpx;

    protected override void OnInitialized()
    {
        if (Json != null)
            GeneratePicture();
    }

    protected override void OnParametersSet()
    {
        if (Json != null)
            GeneratePicture();
    }

    private void GeneratePicture()
    {
        _computeThemeAstral = new ComputeThemeAstral(Json, MaxWidth, MaxHeight);
        _sizeThemeAstralpx = _computeThemeAstral.CalcDraw.getSizeWH().ToString() + "px";
        DrawImage drawImage = new DrawImage(_computeThemeAstral);
        _imageSVG = drawImage.GetSvg(false);
        _imageSVGConsole = drawImage.GetSvg(true);
        _swOk = true;
    }
}